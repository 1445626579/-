一、设计模式的六大原则

1.单一职责
一个类只负责一个功能领域的相关职责，当这个类需要改变时也应该只有一个原因引起变化。

单一职责好处是尽可能提高复用性，当一个类功能复杂时，可复用的可能就越小。

比如定义了一个简单的动作伸手，人每天可能会有无数次伸手的情况，也就调用了无数次伸手。
假如定义的动作是一套军体拳，其中也有伸手的动作，但是不能为了调用伸手动作，去调用一套军体拳。
当我需要修改伸手动作的类时，只因为修改了伸手的动作。
如果定义了军体拳，修改的原因可能是因为修改了伸手的动作，也可能是修改了踢腿的动作

2.开闭原则

开闭原则是指对扩展开放，对修改关闭。类中的方法尽量使用抽象类而不是实现类

假如定义一个类里面有很多动作类，调用这个类组成了一套军体拳，随着时间的推移，当前的军体拳，已经不满足现在的需求，需要新增其他的动作，修改部分现有的动作，此时对抽象的动作类进行新增，已满足的新的需求。

3.里氏代换原则
所有引用基类（父类）的地方必须能透明地使用其子类的对象。

4.依赖倒置原则
高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象，其核心思想是：要面向接口编程，不要面向实现编程。

1.桥接模式

桥接模式的核心思想就是将抽象部分与实现部分分离，使其都可以独立的变化。需要尽可能注意哪些是变量，哪些是常量，常量可以写死在代码中，变量就要交给管理器去管理
例如：
 动物吃食物
 
 其中吃是固定的，而动物可能是羊可能是牛，食物可能是草可能是饲料
 
 就可以对吃的方法抽象，而动物和食物交给管理器来管理
 

 
 代码示例：
 //定义一个吃的类
 class Eat {
  slowEat(food){
    return this.name+"慢慢吃"+food
  }
  eat(food){
    return this.name+"吃"+food
  }
  fastEat(food){
    return this.name+"狼吞虎咽的吃"+food
  }
 }
//定义食物
class Food {
 constructor(name,type){
  this.foodName=name
  this.type=type
 }

}
 //定义动物
class Animal extends Eat{
 constructor(name,type){
  super()
  this.name=name
  this.type=type
 }
}

var tomcat =  new Animal('Tom',"cat")
var food= new Food('Jerry','mouse')
tomcat.eat(food.foodName)//Tom吃Jerry

var sheep = new Animal("小羊肖恩",'sheep')

sheep.slowEat("草")//小羊肖恩慢慢吃草

总结： 尽可能对变量进行抽离，用固定的方法连接变量，以一个固定的模式达成不同的目标。

例1：如动物吃食物，动物可能是任何动物，但是吃的动作是相同的。所以定义一个不变的类，类的方法是个纯函数，函数对变量动物与食物连接，以形成某种固定的动作
例2：某个模块中都有登录程序，但是根据不同的权限需要不同的登录方式，就可以留出登录函数等待外部输入，内部执行这个传入的登录函数，传入那种登录就用哪种登录

